import React, { useRef, useEffect } from "react";
import gridConfig from "./gridconfig";
const _ = require("lodash");

const Grid = () => {
  const slider: any = document.querySelector(".grid");
  let isDown = false;
  let startX: any;
  let scrollLeft: any;

  slider.addEventListener("mousedown", (e: any) => {
    isDown = true;
    slider.classList.add("active");
    startX = e.pageX - slider.offsetLeft;
    scrollLeft = slider.scrollLeft;
  });
  slider.addEventListener("mouseleave", () => {
    isDown = false;
    slider.classList.remove("active");
  });
  slider.addEventListener("mouseup", () => {
    isDown = false;
    slider.classList.remove("active");
  });
  slider.addEventListener("mousemove", (e: any) => {
    if (!isDown) return;
    e.preventDefault();
    const x = e.pageX - slider.offsetLeft;
    const walk = (x - startX) * 3; //scroll-fast
    slider.scrollLeft = scrollLeft - walk;
    console.log(walk);
  });

  const grid = useRef() as React.MutableRefObject<HTMLInputElement>;

  // 2D Array that will be defined later which allows easy access to nodes
  let nodesArray: any[] = [];
  let allNeighborsArray: HTMLElement[] = [];

  // Grid config has to contain width and height
  interface configCriteria {
    width: number;
    height: number;
  }

  function enhabitNode(node: any) {
    node.classList.add("enhabited");
  }

  function findNeighbors(node: any) {
    let neighborsList: any[] = [];

    if (node) {
      neighborsList = [
        nodesArray[node.data.x + 1][node.data.y],
        nodesArray[node.data.x + 1][node.data.y + 1],
        nodesArray[node.data.x + 1][node.data.y - 1],
        nodesArray[node.data.x - 1][node.data.y],
        nodesArray[node.data.x - 1][node.data.y + 1],
        nodesArray[node.data.x - 1][node.data.y - 1],
        nodesArray[node.data.x][node.data.y + 1],
        nodesArray[node.data.x][node.data.y - 1],
      ];
    }

    allNeighborsArray = allNeighborsArray.concat(neighborsList);

    return neighborsList;
  }

  function cycleGenerations() {
    setInterval(() => {
      nextGeneration();
    }, 200);
  }

  function nextGeneration() {
    allNeighborsArray = [];

    const enhabitedArray: any[] = Array.from(
      document.querySelectorAll(".enhabited")
    );
    console.time("entire function");

    for (let i = 0; i < enhabitedArray.length; i++) {
      // get a list of the neighbors of the enhabited node
      let neighborsList;

      neighborsList = findNeighbors(enhabitedArray[i]);

      let enhabitedNeighborsList = neighborsList.filter((neighbor) => {
        return neighbor && neighbor.classList.contains("enhabited");
      });

      if (
        enhabitedNeighborsList.length <= 1 ||
        enhabitedNeighborsList.length >= 4
      ) {
        enhabitedArray[i].classList.remove("enhabited");
      }
    }

    for (let n of _.uniq(allNeighborsArray)) {
      let enhabitedNeighborsList = findNeighbors(n).filter((neighbor) => {
        return neighbor && neighbor.classList.contains("enhabited");
      });

      if (
        enhabitedNeighborsList.length === 3 &&
        !n.classList.contains("enhabited")
      ) {
        n.classList.add("enhabited");
      }
    }

    console.timeEnd("entire function");
  }

  useEffect(() => {
    function generateGrid(gridConfig: configCriteria) {
      const gridContainer = grid.current;

      // Grid generated by forming a row (div) element for the length
      for (let x: number = 0; x < gridConfig.width; x++) {
        let row = document.createElement("div");
        let rowArray: any = [];
        gridContainer.appendChild(row);

        // Fills row element with elements * height
        for (let y: number = 0; y < gridConfig.height; y++) {
          let nodeProperties = {
            x: x,
            y: y,
            enhabited: false,
            neighbors: 0,
          };

          let gridNode: any = document.createElement("div");
          gridNode.classList.add("grid-node");
          rowArray.push(gridNode);

          gridNode.data = nodeProperties;

          gridNode.onclick = () => {
            enhabitNode(gridNode);
          };

          row.appendChild(gridNode);
        }
        nodesArray.push(rowArray);
      }
    }

    generateGrid(gridConfig);

    // bring the middle element into view;
    nodesArray[gridConfig.width / 2][gridConfig.height / 2].scrollIntoView();

    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  return (
    <>
      <div className="grid" ref={grid}></div>
      <button onClick={nextGeneration}>Next Generation</button>
      <button onClick={cycleGenerations}>
        <i className="fas fa-play"></i>
      </button>
    </>
  );
};

export default Grid;
