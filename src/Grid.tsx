import React, { useRef, useEffect } from "react";
import gridConfig from "./gridconfig";

const Grid = () => {
  const grid = useRef() as React.MutableRefObject<HTMLInputElement>;

  // Grid config has to contain width and height
  interface configCriteria {
    width: number;
    height: number;
  }

  function enhabitNode(node: any) {
    node.classList.add("enhabited");

    // get a list of the neighbors of the enhabited node
    let neighborsList: any[] = [
      findNodeByCoordinates(node.data.x + 1, node.data.y),
      findNodeByCoordinates(node.data.x + 1, node.data.y + 1),
      findNodeByCoordinates(node.data.x + 1, node.data.y - 1),
      findNodeByCoordinates(node.data.x - 1, node.data.y),
      findNodeByCoordinates(node.data.x - 1, node.data.y + 1),
      findNodeByCoordinates(node.data.x - 1, node.data.y - 1),
      findNodeByCoordinates(node.data.x, node.data.y + 1),
      findNodeByCoordinates(node.data.x, node.data.y - 1),
    ];

    for (let n of neighborsList) {
        n.style.backgroundColor = "red";
    }

  }

  function findNodeByCoordinates(x: number, y: number): any {
    const nodeNodeList: any = document.querySelectorAll(".grid-node");
    const nodeArrayList = Array.from(nodeNodeList);

    const foundNode = nodeArrayList.filter((obj: any) => {
      return obj.data.x === x && obj.data.y === y;
    });

    return foundNode[0];
  }

  useEffect(() => {
    function generateGrid(gridConfig: configCriteria) {
      const gridContainer = grid.current;

      // Grid generated by forming a row (div) element for the length
      for (let x: number = 0; x < gridConfig.width; x++) {
        let row = document.createElement("div");
        gridContainer.appendChild(row);

        // Fills row element with elements * height
        for (let y: number = 0; y < gridConfig.height; y++) {
          let nodeProperties = {
            x: x,
            y: y,
            enhabited: false,
            neighbors: 0,
          };

          let gridNode: any = document.createElement("div");
          gridNode.classList.add("grid-node");

          gridNode.data = nodeProperties;

          gridNode.onclick = () => {
            enhabitNode(gridNode);
          };

          row.appendChild(gridNode);
        }
      }
    }

    generateGrid(gridConfig);
    
    // bring the middle element into view;
    // (findNodeByCoordinates((gridConfig.width/2), (gridConfig.height/2))).scrollIntoView();

    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  return <div className="grid" ref={grid}></div>;
};

export default Grid;
